%!PS-Adobe-3.0 EPSF-3.0
%%Title: clients.eps
%%Creator: XCircuit v3.8 rev78
%%CreationDate: Mon Nov 26 04:34:21 2018
%%Pages: 1
%%BoundingBox: 68 68 962 363
%%DocumentNeededResources: font Helvetica Helvetica-Bold
%%EndComments
%%BeginProlog
%
%  PostScript prolog for output from xcircuit
%  Version: 3.8
%
%  Electrical circuit (and otherwise general) drawing program
%
%  Written by Tim Edwards 8/5/93--11/1/10  (tim.edwards@multigig.com)
%  The Johns Hopkins University (1993-2004)
%  MultiGiG, Inc. (2004-2012)
%
%%BeginResource: procset XCIRCproc 3.8 0
%
% supporting definitions --- these are the primary xcircuit types.

/XCIRCsave save def
/topmat matrix currentmatrix def

/fontslant { /slant exch def [1 0 slant 1 0 0]
    exch findfont exch makefont dup length dict /ndict exch def
    { 1 index /FID ne { ndict 3 1 roll put } { pop pop } ifelse } forall
    ndict definefont pop} def
/ul { dup type /stringtype eq showflag 1 eq and { gsave
   currentpoint topmat setmatrix 0 0 moveto 2 index stringwidth pop (_)
   false charpath flattenpath pathbbox grestore exch pop 1 index
   sub setlinewidth exch pop currentpoint 3 -1 roll add moveto 0
   rlineto stroke moveto } if } def
/ol { dup type /stringtype eq showflag 1 eq and { gsave gsave
   currentpoint topmat setmatrix 2 index stringwidth pop 3 index
   true charpath flattenpath pathbbox grestore exch pop
   exch pop topmat setmatrix (_) true charpath pathbbox grestore
   exch pop 1 index sub setlinewidth exch pop currentpoint
   exch 4 1 roll exch sub add moveto pop 0 rlineto stroke
   moveto } if } def
/stW { gsave currentpoint newpath moveto true charpath flattenpath
	pathbbox pop exch pop sub grestore } def
/Ts {mark Tabs aload pop counttomark 1 add array astore /Tabs exch def Tabs
	0 currentpoint pop put} def
/Tbn {mark Tabs aload pop counttomark dup 2 add 1 roll cleartomark 1 sub} def
/Tb { 0 1 Tbn {Tabs exch get dup currentpoint pop lt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/Tf { Tbn -1 0 {Tabs exch get dup currentpoint pop gt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/qS { (aa) stW (a a) stW sub 4 div 0 Kn } def
/hS { qS qS } def
/pspc 0 def
/cf0 { scalefont setfont } bind def
/Kn { dup kY add /kY exch def rmoveto } bind def
/ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.33 mul neg Kn} def
/Ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.67 mul Kn } def
/ns { 0 kY neg Kn /kY 0 def /fscale 1.0 def xfont0 1.0 cf0 } def
/MR { /twidth exch def } def
/CR { ns 0 /Bline Bline fscale0 neg add def Bline moveto } def
/cf { dup type /realtype ne {1.0} if exch findfont exch kY 0 eq
	{ 40 mul dup /fscale0 exch def cf0 /xfont0 currentfont def}
	{fscale0 mul fscale mul cf0} ifelse } def
/ctmk { counttomark dup 2 add -1 roll pop } bind def
/label { gsave translate 0 0 moveto dup scale neg
	/rotval exch def /twidth 100000 def /just exch def just 384 and
	0 gt {/mshow {pop} def} {/mshow {show} def} ifelse just 16 and 0
	gt {gsave rotval rotate 0 1 dtransform gsave pagemat setmatrix
	idtransform exch grestore 1 0 dtransform gsave pagemat setmatrix
	idtransform exch grestore dup abs 1e-9 lt {pop mul 0 gt} {3 1 roll
	pop pop 0 lt} ifelse grestore {-1 /rotval rotval neg def /just just
	dup 3 and 1 ne {3 xor} if def} {1} ifelse exch -1e-9 lt {-1 /rotval
	rotval neg def /just just dup 12 and 4 ne {12 xor} if def} {1}
	ifelse scale } if /showflag 0 def /fspc pspc def /Bline 0 def /Tabs
	0 array def /fscale 1.0 def /kY 0 def gsave dup 1 add copy dup
	1 0 dtransform exch atan rotate {exch dup type /stringtype eq {gsave
        dup gsave newpath 0 0 moveto true charpath flattenpath pathbbox pop
	exch pop exch pop grestore currentpoint pop add twidth
	ge {grestore CR exch 1 add dup 2 add {CR} exch 1 roll exch} {grestore}
	ifelse true charpath flattenpath} {dup type /arraytype eq {exec} {12
	string cvs true charpath flattenpath} ifelse} ifelse} repeat exch pop
	pathbbox grestore 3 -1 roll pop 3 1 roll just 1 and 0 gt {just 2 and
	0 gt {exch pop neg fspc sub} {exch sub 0.5 mul neg} ifelse} {pop neg
	fspc add} ifelse exch Bline exch just 4 and 0 gt {just 8 and 0 gt
	{exch pop neg fspc sub} {add 0.5 mul neg} ifelse} {pop neg fspc add}
	ifelse rotval rotate Kn currentpoint translate /showflag 1 def /Bline
	0 def /Tabs 0 array def /fscale 1.0 def /kY 0 def {dup type
	/stringtype eq {mshow} {dup type /arraytype eq {exec} {12 string cvs
	mshow} ifelse} ifelse} repeat grestore endclip} def
/pinlabel { 4 index 32 and 0 ne hlevel 0 eq or { /pspc 10 def label
	/pspc 0 def } { pop pop pop pop pop {pop} repeat } ifelse } def
/pinglobal { pinlabel } def
/infolabel { pinlabel } def
/graphic { gsave 4 index cvx exec /DataSource get resetfile translate 0 0
	moveto neg rotate dup scale cvx exec image grestore endclip} def

/scb { setrgbcolor } bind def  /sce { defColor aload pop scb } bind def
/cRedef {/defColor currentcolor 3 array astore def} def
/begingate {dup type /dicttype ne {1 dict} if begin % default params
	dup type /dicttype ne {1 dict} if begin % instanced params
	/hlevel hlevel 1 add def /defColor currentcolor sce 3 array astore
	def gsave sce translate 0 0 moveto neg rotate dup type /nametype
	eq not { dup abs currentlinewidth exch div setlinewidth } { pop }
	ifelse dup abs scale clipped 1 and 1 eq {/clipped clipped 1 add def}
	if} bind def
/endgate { /hlevel hlevel 1 sub def grestore defColor aload pop cRedef
	scb end end endclip} bind def

/hlevel 0 def
/endclip {clipped 1 and 1 eq {grestore /clipped clipped 1 sub def} if} def
/tmpa [1 0 0 1 0 0] def
/gar {8 8 true tmpa {<c0 c0 00 00 0c 0c 00 00>} imagemask} bind
{8 8 true tmpa {<30 70 60 02 03 07 06 20>} imagemask} bind
{8 8 true tmpa {<0c 1e 1e 0c c0 e1 e1 c0>} imagemask} bind
{8 8 true tmpa {<0f 0f 0f 0f f0 f0 f0 f0>} imagemask} bind
{8 8 true tmpa {<3f f3 e1 e1 f3 3f 1e 1e>} imagemask} bind
{8 8 true tmpa {<df cf 8f 9f fd fc f8 f9>} imagemask} bind
{8 8 true tmpa {<ff 3f 3f ff ff f3 f3 ff>} imagemask} bind 7 array astore def
/ppaint { gsave clip tmpa dup setmatrix pathbbox neg exch neg 4 2 roll
  neg 4 -1 roll 2 copy gt {exch} if 8 div ceiling 8 mul 4 2 roll neg 2 copy
  gt {exch} if 8 div ceiling 8 mul 3 -1 roll -8 5 -1 roll
  { 3 index exch 5 exch put dup -8 3 index { 3 index
  exch 4 exch put 3 index exec } for } for pop pop pop pop grestore } bind def
/setstyles {
  currentlinewidth mul setlinewidth /style exch def style 2048 and 0 gt
  clipped 1 and 0 eq and {clip newpath /clipped clipped 1 add def} {
  style 1 and 0 gt not {closepath} if
  style 1024 and 0 gt {2 setlinecap 0 setlinejoin} if
  style 2 and 0 gt {currentlinewidth 4 mul dup 2 array astore 0 setdash} if
  style 4 and 0 gt {0.5 currentlinewidth 4 mul 2 array astore 0 setdash} if
  gsave style 16 and 0 gt { style 224 and -5 bitshift style 256 and 0 gt {
  7 exch sub 8 div dup 1 exch sub currentrgbcolor 3 array astore
  {3 copy mul add 4 1 roll pop} forall pop pop setrgbcolor eofill}
  {dup 7 lt {gar exch get ppaint} {pop eofill} ifelse} ifelse}
  {style 256 and 0 gt {1 setgray eofill} if} ifelse grestore style 8 and 0 gt
  style 512 eq or {newpath} {stroke} ifelse grestore endclip} ifelse} def

/addtoy {exch dup dup 2 mul 3 add 1 roll -1 1 { 4 1 roll dup 4 1 roll add
	4 -1 roll 2 mul 1 add index 2 mul 2 add 2 roll} for pop} def
/addtoy1 {1 exch addtoy pop} def
/addtoy3 {3 exch addtoy pop} def
/addtoy4 {4 exch addtoy pop} def
/addtox {exch dup dup 2 mul 3 add 1 roll -1 1 { 4 1 roll dup 4 1 roll 3 -1 roll
	add exch 4 -1 roll 2 mul 1 add index 2 mul 2 add 2 roll} for pop} def
/addtox1 {1 exch addtox pop} def
/addtox3 {3 exch addtox pop} def
/addtox4 {4 exch addtox pop} def
/polygon { gsave /num exch def moveto num 1 sub {lineto} repeat setstyles } def
/xcarc   { gsave newpath arc setstyles } def
/elb { matrix currentmatrix 7 -1 roll 7 -1 roll translate 5 1 roll 4 -1 roll
	3 index div 1 scale } def
/ele { 0 4 1 roll 0 4 1 roll } bind def
/ellipse { gsave elb newpath ele arc setmatrix setstyles } def
/pellip  { elb ele arc setmatrix } def
/nellip  { elb ele arcn setmatrix } def
/spline  { gsave moveto curveto setstyles } def
/polyc   { {lineto} repeat } bind def
/beginpath { gsave moveto } bind def
/endpath { setstyles } bind def
/bop     { 1 setlinecap 2 setlinejoin 6 setmiterlimit 0 0 0 scb cRedef
	/clipped 0 def} def
/psinsertion {/PSobj save def /showpage {} def /setpagedevice {pop} def bop
	rotate translate dup scale} def
/end_insert {PSobj restore} def
/setpagemat {/pagemat matrix currentmatrix def} def
/inchscale  {setpagemat 0.375 mul dup scale} def
/cmscale    {setpagemat 0.35433071 mul dup scale} def

%%EndResource
%%EndProlog

% XCircuit output starts here.

%%BeginSetup

/generic::arrowhead {
% nonetwork
begingate
8 -28 beginpath
3 -18 3 -15 0 0 curveto
-3 -15 -3 -18 -8 -28 curveto
-2 -26 2 -26 8 -28 curveto
249
1.000 endpath
endgate
} def


%%EndSetup

%%Page: timing2 1
%%PageOrientation: Portrait
/pgsave save def bop
0.8500 inchscale
2.6000 setlinewidth 1469 391 translate

(n_lat cycles) {/Helvetica cf} 2 17 0 1.000 416 128 label
1.000 90 616 144 generic::arrowhead
-1.000 270 216 144 generic::arrowhead
1 1.000 240 144 288 144 2 polygon
1 1.000 544 144 592 144 2 polygon
(output) {/Helvetica cf} 2 19 0 1.000 -1136 16 label
1 1.000 -1104 0 -1120 16 -1120 48 -1104 64 4 polygon
1 1.000 -944 336 -752 336 -736 400 -240 400 1328 400 1344 336 1536 336 7
polygon
(raw_l) {/Helvetica cf} 2 19 0 1.000 -976 352 label
1 1.000 -544 512 -512 512 -496 448 -432 448 -416 512 -352 512 -336 448 -272 448
-256 512 -192 512 -176 448 -112 448 -96 512 -32 512 -16 448 48 448 64 512 128
512 144 448 208 448 224 512 288 512 304 448 368 448 384 512 448 512 464 448 496
448 28 polygon
(idata) {/Helvetica cf} 2 19 0 1.000 -976 464 label
(input) {/Helvetica cf} 2 19 0 1.000 -1136 416 label
1 1.000 -1104 224 -1120 240 -1120 608 -1104 624 4 polygon
1 1.000 -944 224 208 224 224 288 480 288 1008 288 1024 224 1536 224 7 polygon
(raw_s) {/Helvetica cf} 2 19 0 1.000 -976 240 label
1 1.000 -544 448 -512 448 -496 512 -432 512 -416 448 -352 448 -336 512 -272 512
-256 448 -192 448 -176 512 -112 512 -96 448 -32 448 -16 512 48 512 64 448 128
448 144 512 208 512 224 448 288 448 304 512 368 512 384 448 448 448 464 512 496
512 28 polygon
(len_c) {/Helvetica cf} 2 19 0 1.000 -976 576 label
(d) {/Helvetica cf} 2 21 0 1.000 256 480 label
(d) {/Helvetica cf} 2 21 0 1.000 336 480 label
(d) {/Helvetica cf} 2 21 0 1.000 416 480 label
(d) {/Helvetica cf} 2 21 0 1.000 496 480 label
(d) {/Helvetica cf} 2 21 0 1.000 576 480 label
(d) {/Helvetica cf} 2 21 0 1.000 656 480 label
(d) {/Helvetica cf} 2 21 0 1.000 736 480 label
(d) {/Helvetica cf} 2 21 0 1.000 816 480 label
(len-8 cycles) {/Helvetica cf} 2 17 0 1.000 616 320 label
1.000 90 1016 336 generic::arrowhead
-1.000 270 216 336 generic::arrowhead
1 1.000 240 336 496 336 2 polygon
1 1.000 752 336 1000 336 2 polygon
3 1.000 216 240 216 112 2 polygon
1 1.000 496 512 528 512 544 448 608 448 624 512 688 512 704 448 768 448 784 512
848 512 864 448 928 448 944 512 1008 512 1024 448 1088 448 1104 512 1168 512
1184 448 1248 448 1264 512 1328 512 1344 448 1408 448 1424 512 1488 512 1504
448 1536 448 28 polygon
1 1.000 496 448 528 448 544 512 608 512 624 448 688 448 704 512 768 512 784 448
848 448 864 512 928 512 944 448 1008 448 1024 512 1088 512 1104 448 1168 448
1184 512 1248 512 1264 448 1328 448 1344 512 1408 512 1424 448 1488 448 1504
512 1536 512 28 polygon
(d) {/Helvetica cf} 2 21 0 1.000 896 480 label
(d) {/Helvetica cf} 2 21 0 1.000 976 480 label
1 1.000 -544 64 -512 64 -496 0 -432 0 -416 64 -352 64 -336 0 -272 0 -256 64
-192 64 -176 0 -112 0 -96 64 -32 64 -16 0 48 0 64 64 128 64 144 0 208 0 224 64
288 64 304 0 368 0 384 64 448 64 464 0 496 0 28 polygon
(odata) {/Helvetica cf} 2 19 0 1.000 -976 16 label
1 1.000 -544 0 -512 0 -496 64 -432 64 -416 0 -352 0 -336 64 -272 64 -256 0 -192
0 -176 64 -112 64 -96 0 -32 0 -16 64 48 64 64 0 128 0 144 64 208 64 224 0 288 0
304 64 368 64 384 0 448 0 464 64 496 64 28 polygon
(d) {/Helvetica cf} 2 21 0 1.000 656 32 label
(d) {/Helvetica cf} 2 21 0 1.000 736 32 label
(d) {/Helvetica cf} 2 21 0 1.000 816 32 label
(d) {/Helvetica cf} 2 21 0 1.000 896 32 label
(d) {/Helvetica cf} 2 21 0 1.000 976 32 label
(d) {/Helvetica cf} 2 21 0 1.000 1056 32 label
(d) {/Helvetica cf} 2 21 0 1.000 1136 32 label
(d) {/Helvetica cf} 2 21 0 1.000 1216 32 label
1 1.000 496 64 528 64 544 0 608 0 624 64 688 64 704 0 768 0 784 64 848 64 864 0
928 0 944 64 1008 64 1024 0 1088 0 1104 64 1168 64 1184 0 1248 0 1264 64 1328
64 1344 0 1408 0 1424 64 1488 64 1504 0 1536 0 28 polygon
1 1.000 496 0 528 0 544 64 608 64 624 0 688 0 704 64 768 64 784 0 848 0 864 64
928 64 944 0 1008 0 1024 64 1088 64 1104 0 1168 0 1184 64 1248 64 1264 0 1328 0
1344 64 1408 64 1424 0 1488 0 1504 64 1536 64 28 polygon
(d) {/Helvetica cf} 2 21 0 1.000 1296 32 label
(d) {/Helvetica cf} 2 21 0 1.000 1376 32 label
3 1.000 616 64 616 160 2 polygon
(about 44 cycles) {/Helvetica cf} 2 17 0 1.000 -272 320 label
(4 cycles) {/Helvetica cf} 2 16 0 1.000 1104 320 label
1 1.000 -944 512 -912 512 -896 448 -832 448 -816 512 -752 512 -736 448 -672 448
-656 512 -592 512 -576 448 -512 448 -496 512 -432 512 -416 448 -352 448 -336
512 -272 512 -256 448 -192 448 -176 512 -112 512 -96 448 -32 448 -16 512 48 512
64 448 96 448 28 polygon
1 1.000 -944 448 -912 448 -896 512 -832 512 -816 448 -752 448 -736 512 -672 512
-656 448 -592 448 -576 512 -512 512 -496 448 -432 448 -416 512 -352 512 -336
448 -272 448 -256 512 -192 512 -176 448 -112 448 -96 512 -32 512 -16 448 48 448
64 512 96 512 28 polygon
1 1.000 -944 64 -912 64 -896 0 -832 0 -816 64 -752 64 -736 0 -672 0 -656 64
-592 64 -576 0 -512 0 -496 64 -432 64 -416 0 -352 0 -336 64 -272 64 -256 0 -192
0 -176 64 -112 64 -96 0 -32 0 -16 64 48 64 64 0 96 0 28 polygon
1 1.000 -944 0 -912 0 -896 64 -832 64 -816 0 -752 0 -736 64 -672 64 -656 0 -592
0 -576 64 -512 64 -496 0 -432 0 -416 64 -352 64 -336 0 -272 0 -256 64 -192 64
-176 0 -112 0 -96 64 -32 64 -16 0 48 0 64 64 96 64 28 polygon
3 1.000 -744 288 -744 352 2 polygon
3 1.000 216 272 216 352 2 polygon
-1.000 90 216 336 generic::arrowhead
-1.000 270 -744 336 generic::arrowhead
1 1.000 -728 336 -432 336 2 polygon
1 1.000 200 336 -112 336 2 polygon
3 1.000 1016 272 1016 360 2 polygon
3 1.000 1336 352 1336 304 2 polygon
1.000 90 1336 336 generic::arrowhead
-1.000 270 1016 336 generic::arrowhead
1 1.000 1040 336 1096 336 2 polygon
1 1.000 1320 336 1264 336 2 polygon
1 1.000 176 560 208 560 224 624 288 624 304 560 368 560 384 624 448 624 464 560
528 560 544 624 608 624 624 560 688 560 704 624 768 624 784 560 848 560 864 624
928 624 944 560 1008 560 1024 624 1056 624 24 polygon
1 1.000 1056 560 1024 560 1008 624 944 624 928 560 864 560 848 624 784 624 768
560 704 560 688 624 624 624 608 560 544 560 528 624 464 624 448 560 384 560 368
624 304 624 288 560 224 560 208 624 176 624 24 polygon
(len) {/Helvetica cf} 2 21 0 1.000 256 592 label
(9) {/Helvetica cf} 2 21 0 1.000 976 592 label
(10) {/Helvetica cf} 2 21 0 1.000 896 592 label
(11) {/Helvetica cf} 2 21 0 1.000 816 592 label
(x) {/Helvetica cf} 2 21 0 1.000 1056 592 label
(x) {/Helvetica cf} 2 21 0 1.000 176 592 label
1 1.000 -944 624 192 624 2 polygon
1 1.000 -944 560 192 560 2 polygon
1 1.000 1056 624 1536 624 2 polygon
1 1.000 1056 560 1536 560 2 polygon
(\(actually max\(4, 34-len\)\)) {/Helvetica cf} 2 16 0 1.000 1088 256 label
(len is the RFC 768 UDP datagram length, including 8 bytes of header)
{/Helvetica cf} 2 16 0 1.000 -320 -96 label
(n_lat is a parameter, same for all clients within one build) {/Helvetica cf} 2
16 0 1.000 -320 -160 label
(Packet Badger client interface) {/Helvetica-Bold cf} 2 16 0 1.200 -320 704
label
pgsave restore showpage

%%Trailer
XCIRCsave restore
%%EOF
