Real-Time Ethernet Fabric Infrastructure (building on PSPEPS experience)
(work-in-progress)

Also see rtefi.eps

Keep core success of PSPEPS that it can support self-throttled full-rate
communications to unbuffered clients.  Supporting UDP rather than raw
Ethernet is (still) worth the effort in order to align with the security
model of typical host computers; an application doesn't need root privileges
to communicate over UDP.

Hardware support limited to IP, ARP, ICMP echo, UDP.  TCP support (if any)
would be relegated to the soft-core.  IPv4 only, no IP options or
fragmentation.  Supporting jumbo packets is easy in theory, but balloons the
latency and amount of storage needed; just don't do it.

A major defect in PSPEPS was the side-channel handling of source IP and MAC,
which was easily confused when handling communication from multiple hosts.
That info is correctly handled per-packet in RTEFI.

Even clients that have to buffer their data need to be shoehorned into the
unbuffered paradigm.  Expect this will happen by making them respond to each
input packet with a status message that includes their (possibly incomplete)
output buffer.  Known possible sub-clients include flash programming,
microcontroller bridge, and JTAG.  Those sub-clients could share (time-slice
access) their input and output buffers.  Work on such clients has not started.

A common packet structure for the buffered clients can include at least one
nonce, a flag for reply-buffer complete, and a time estimate for when that
buffer will be complete.  Plus optional authentication components, see below.

We hope eventually to include PTP/White Rabbit IEEE-1588 capability somewhere,
maybe with the assistance of a soft-core.

The input scanner transcribes packets with a fixed latency of about 20 cycles.
Status bits written to badge include, among other things, a check that the
UDP payload length is consistent with the actual packet length; a packet that
fails that test is considered not UDP.

The badge added to packet by the input scanner is necessarily less than 12
octets, the minimum IFG.  Actually one less than that, due to the potential
Tx/Rx 100ppm clock mismatch.  The actual length now is five octets.

The mem_gateway client could eventually have two UDP port numbers, one with
and one without authentication.

Output signature insertion must have a fixed latency, maybe around 16 cycles.
This contrasts with the one-cycle latency of CRC32 insertion.

Plan to write a self-diagnostic client, capable of reporting things like packet
counts, byte counts, error counts, Rx/Tx frequency ratio, and which hosts
are communicating.  Of course it will be optional, but attempt to make it
small and non-intrusive enough that it will practically be kept in most builds.
It's an interesting question whether reports should be public or require
authentication.  Not sure if it is better handled as as a buffered or
unbuffered client.

Rx MAC for soft-core should be run-time configurable by the soft-core; nominal
is to accept all packets with our dest MAC and IP, but not handled by hardware
clients.  It will inherently receive packets with IP options or fragmentation
set.  Include promiscuous mode option.

Precog (precognition) module leverages the 1 MTU shift register to look ahead
for a prescribed gap in the input.  That will become an available slot in the
Tx channel into which the output buffer of the soft-core MAC can be inserted.

PSPEPS claimed to fit in 1000 LUTs minimum; this base structure hasn't
changed that much.  Prototyping indicates authentication will likely add over
1000 more LUT.  We could still come in at under 10% of a 7A35T.

Minimum DPRAM usage is one, without authentication or any buffered clients.
Add two for authentication key memory, two for buffered clients, two for a
soft-core MAC, and two typical overhead internal to mem_gateway (config_romx
and mirror), total could reach nine.  All DPRAM instances should be useful
at 2K x 8, the minimum size in 7-series Xilinx chips.

UDP checksums are always disabled now.  We could also provide the option for
a client to fake its checksum.  A true checksum is not possible for causality
reasons.

Flash-program and JTAG buffered sub-clients will demand authentication.

People do ask about DHCP.  This is likely a job for the soft-core.

UDP echo on port 7 is included in the baseline, no netlist overhead, but
can be disabled.  No ICMP port unreachable responses are ever generated
(unless by some future soft core and its software).  At some point we need
to probe/fingerprint this code with nmap, zmap, arp-scan, p0f, prads, others.

For maximum clarity and applicability, the implementation is (and needs
to be kept) 100% portable Verilog, properly testable with both Icarus and
Verilator.  Some of that Verilog may be machine-generated by open-source
tools.

LBNL think tank props:  Larry Doolittle, Vamsi Vytla, Eric Norum, Gang Huang
