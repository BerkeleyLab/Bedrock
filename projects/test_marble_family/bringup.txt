# route add -net 192.168.19.0 netmask 255.255.255.0 enp3s0
# build bitfiles
# power on
./mutil usb
export IP=192.168.19.17
ping -c 2 $IP
cd bedrock/badger/tests
python3 spi_test.py --ip=$IP --id
# comes back 0, 0

# Read random number programmed in S25FL128S,
# see 8.1.3 Cypress Programmed Random Number
python3 spi_test.py --ip=$IP --otp --pages=1 --dump=/tmp/sno.dat
hexdump -e '16/1 "%02x" "\n"' /tmp/sno.dat | head -n 1

# Configuration Register 1: CR1
# OTP bits documented on p.53 of s25fl128s.pdf
# TBPROT is CR1[5]  set to 1
# DNU    is CR1[4]  set to 0
# BPNV   is CR1[3]  set to 0
# TBPARM is CR1[2]  set to 1
# Status Register 1: SR1
# Table 41: lower 4th BP[2:0] == SR1[4:2] = 3'b101
# (note this would have to change to 3'b110 if we populated an 'A200T)
# Freeze bit (8.3.1) is useless, except maybe for some tests.
# Real (hardware) protection discussed in 8.3.2, needs SRWD set.
# SRWD   is SR1[7]  set to 1
# BP[2]  is SR1[4]  set to 1
# BP[1]  is SR1[3]  set to 0
# BP[0]  is SR1[2]  set to 1
python3 spi_test.py --ip=$IP --status_write 0x94 --config_write 0x24
python3 spi_test.py --ip=$IP --id
# comes back 24, 94
# Manufacturer ID: 01
# Device ID:       17
# Memory Type:     20
# Capacity:        18
# CONFIG_REG = 24
# INFO:Check Status Reg: 94

# Only after all the CR1 OTP bits are set the way I want,
cd ../../..
BITFILE=~/hack/marble/marble1_17.bit ./mutil gold
BITFILE=~/hack/marble/marble1_18.bit ./mutil prod
# power-cycle, should boot quickly to 192.168.19.17
ping -c 2 $IP
./mutil reboot
sleep 2
ping -c 2 192.168.19.18

# SW1 (near the gap between two FMC connectors)
# Off means internal pull-up of U30 makes WP# high, no protection.
# On means that node shorted to ground, WP# low, write protection enabled.
# On has slide away from LBNL logo.
# Final test code should raise CFG_D02 and monitor CFG_WP_B (via P0_7 of U39,
# PCA9555 with address 0x42) to check that R209 is really not present.

# XC7A100T Bitfiles are about 3.7 Mbytes, fills addresses up to 0x3a60ff.
# Erase block size is 64kB, so reprogramming a bitfile erases up to 0x3affff.
# Write-protection should stop at 0x3fffff,
# and we load the production image at 0x400000.
# S25FL128S chip as a whole is 16 MByte, last address 0xffffff.
# Test writing at 0x3e0000 and 0xfe0000.
# look for SR1[5] E_ERR Erase error and SR1[6] P_ERR Program error
#
# Testing write-protect ability.  First with SW1 off:
# /dev/urandom is non-blocking
dd if=/dev/urandom bs=65536 count=1 of=/tmp/f1
dd if=/dev/urandom bs=65536 count=1 of=/tmp/f2
python3 spi_test.py --ip=$IP --add=0x3e0000 --program=/tmp/f1
python3 spi_test.py --ip=$IP --add=0xfe0000 --program=/tmp/f2
python3 spi_test.py --ip=$IP --add=0x3e0000 --pages=256 --dump=/tmp/c1
python3 spi_test.py --ip=$IP --add=0xfe0000 --pages=256 --dump=/tmp/c2
cmp /tmp/f1 /tmp/c1
cmp /tmp/f2 /tmp/c2
# should all succeed.
# Programming f1 should fail with SW1 on.

# LPC1776, seems to work OK using OpenOCD from either git master
# or stock Debian Buster.
git clone https://github.com/richardeoin/lpc-toolchain
git checkout LPC1769
patch -p1 < marble-lpc1776.patch
# apt-get install gcc-arm-none-eabi
make
openocd -f lpc1776.cfg -c "program lpc1776.elf reset exit"
