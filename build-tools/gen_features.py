import sys
import argparse
import yaml
import json


def parse_yaml(fname):
    with open(fname, 'r') as FH:
        try:
            yy = yaml.load(FH, Loader=yaml.FullLoader)
        except yaml.YAMLError as e:
            print("Badly formatted yaml file: %s" % fname)
            print(e)
            sys.exit(-1)

    config_list = [k for k in yy.keys() if not k.startswith("__")]
    config_dicts = [(k, yy[k]) for k in config_list]

    return config_dicts


def write_json(basename, cfg_dict, verbose=False):
    fname = basename + ".json"
    if verbose:
        print("Writing metadata to JSON: %s" % fname)

    # Extract parameters from configuration dict and wrap in metadata dict
    p_dict = cfg_dict['params']
    m_dict = {"__metadata__": p_dict}

    with open(fname, 'w') as FH:
        json.dump(m_dict, FH, sort_keys=True, indent=4, separators=(',', ': '))


def write_vlog(basename, cfg_dict, verbose=False):
    fname = basename + ".vh"
    if verbose:
        print("Writing parameters to Verilog: %s" % fname)

    # Separate parameters from defines
    p_dict = cfg_dict['params']
    d_dict = cfg_dict['defs']

    p_string = "localparam C_%s = %s;\n\n"  # prefix parameters to avoid namespace clashes
    d_string = "`define %s\n\n"

    with open(fname, 'w') as FH:
        FH.write("// Machine generated by gen_features.py\n\n")
        for p, v in p_dict.items():
            FH.write(p_string % (p.upper(), v))
        for d, v in d_dict.items():
            if (v == 0):
                FH.write("//")
            FH.write(d_string % d.upper())


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Parses a feature definition YAML containing per-config\
                                                  defines/parameter. The output are per-config ROM metadata\
                                                  in JSON format and Verilog packages')
    parser.add_argument('-i', '--input', type=str, required=True, help='A list of json files to be merged')
    parser.add_argument('-v', '--verbose', default=False, type=str, help='Verbose output')
    args = parser.parse_args()

    cfg_dicts = parse_yaml(args.input)

    for cfg in cfg_dicts:
        basename = "features_" + cfg[0]
        write_json(basename, cfg[1], args.verbose)
        write_vlog(basename, cfg[1], args.verbose)
